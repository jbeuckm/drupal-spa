{
  "name": "node-persist",
  "version": "0.0.2",
  "description": "Super-easy (and fast) persistent data structures in Node.js, modeled after HTML5 localStorage",
  "main": "node-persist.js",
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:neudesic/node-persist.git"
  },
  "keywords": [
    "node",
    "persist",
    "storage"
  ],
  "author": {
    "name": "Ben Monro & Simon Last"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "dependencies": {
    "mkdirp": "~0.3.5",
    "underscore": "~1.4.4",
    "sugar": "~1.3.8"
  },
  "readme": "#node-persist\n##(localStorage on the server)\n\n###Super-easy (and fast) persistent data structures in Node.js, modeled after HTML5 localStorage\nNode-persist doesn't use a database. Instead, JSON documents are stored in the file system for persistence. Because there is no network overhead and your data is just in-memory, node-persist is just about as fast as a database can get. Node-persist uses the HTML5 localStorage API, so it's easy to learn.\n\nThis is still a work in progress. Send pull requests please.\n\n##Install\n\tnpm install node-persist\n\n\tvar storage = require('node-persist');\n\n##Basic Example\n\t//you must first call storage.init or storage.initSync\n\tstorage.initSync();\n\n\t//then start using it\n\tstorage.setItem('name','yourname');\n\tconsole.log(storage.getItem('name'));\n\n\tvar batman = {\n\t\tfirst: 'Bruce',\n\t\tlast: 'Wayne',\n\t\talias: 'Batman'\n\t};\n\n\tstorage.setItem('batman',batman);\n\tconsole.log(storage.getItem('batman').alias);\n\n##Run the examples:\n\tcd examples/examplename\n\tnode examplename.js\n\topen up localhost:8080\n\n##Options\nYou can pass init or initSync an options object to customize the behavior of node-persist\n\n\tstorage.init({\n\t\tdir:'relative/path/to/persist',\n\t\tstringify: JSON.stringify,\n\t\tparse: JSON.parse,\n\t\tencoding: 'utf8',\n\t\tlogging: false,\n\t\tcontinuous: true,\n\t\tinterval: false\n\t});\n\n##Documentation\nBy default, node-persist persists a key directly after persistSync is called on it.\n\n###Node-persist has 3 ways of running:\n\n1. By default, keys will be persisted after every call of setItem\n2. If you set an interval, node-persist will persist changed keys at that interval instead of after every call of setItem.\n3. If you set continuous to false and don't specify an interval, keys aren't persisted automatically, giving you complete control over when to persist them.\n\n###getItem(key)\nThis function will get a key from your database, and return its value, or undefined if it is not present.\n\n\tstorage.getItem('name');\n\tstorage.getItem('obj').key1;\n\tstorage.getItem('arr')[42];\n\n\n###setItem(key, value)\nThis function sets 'key' in your database to 'value'. It also sets a flag, notifying that 'key' has been changed and needs to be persisted in the next sweep. Because the flag must be set for the object to be persisted, it is best to use node-persist in a functional way, as shown below.\n\n\tstorage.setItem('fibonacci',[0,1,1,2,3,5,8]);\n\tstorage.setItem(42,'the answer to life, the universe, and everything.')\n\n\tvar batman = storage.getItem('batman');\n\tbatman.sidekick = 'Robin';\n\tstorage.setItem('batman',batman); //this ensures the object is persisted\n\n###removeItem(key)\nThis function removes key in the database if it is present, and immediately deletes it from the file system asynchronously.\n\n\tstorage.removeItem('me');\n\tstorage.removeItem(42);\n\n###values(callback)\nThis function returns all of the values in the database.\n\n\tstorage.setItem(\"batman\", {name: \"Bruce Wayne\"});\n\tstorage.setItem(\"superman\", {name: \"Clark Kent\"});\n\tstorage.values(function(vals){\n\t    console.log(vals); //output: [{name: \"Bruce Wayne\"},{name: \"Clark Kent\"}]\n\t});\n\n###clear()\nThis function removes all keys in the database, and immediately deletes all keys from the file system asynchronously.\n\n###key(n)\nThis function returns a key with index n in the database, or null if it is not present. The ordering of keys is not known to the user.\n\n###length()\nThis function returns the number of keys stored in the database.\n\n##Fine-grained control\nMake sure you set continuous: false in the options hash, and you don't set an interval\n###persist(), persistSync()\nThese functions can be used to manually persist the database\n\n\t\tstorage.persist();\n\t\tstorage.persistSync();\n\n\n###persistKey(key), persistKeySync(key)\nThese functions manually persist 'key' within the database\n\n\t\tstorage.setItem('name','myname');\n\t\tstorage.persistKey('name');\n\n\n###[Simon Last](http://simonlast.org)\n",
  "bugs": {
    "url": "https://github.com/neudesic/node-persist/issues"
  },
  "homepage": "https://github.com/neudesic/node-persist",
  "_id": "node-persist@0.0.2",
  "_from": "node-persist@*"
}
