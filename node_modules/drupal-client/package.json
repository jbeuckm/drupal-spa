{
  "name": "drupal-client",
  "version": "0.1.0",
  "description": "Javascript Drupal Services Client",
  "main": "./lib/drupal",
  "repository": {
    "type": "git",
    "url": "git@github.com:jbeuckm/drupal-client.git"
  },
  "bugs": {
    "url": "https://github.com/jbeuckm/drupal-client/issues"
  },
  "keywords": [
    "drupal",
    "rest",
    "services",
    "titanium",
    "node"
  ],
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "xmlhttprequest": "git://github.com/jbeuckm/node-XMLHttpRequest#progress",
    "node-persist": "*"
  },
  "devDependencies": {
    "jasmine-node": "*",
    "node-inspector": "~0.7.2",
    "jslint": "~0.5.0"
  },
  "scripts": {
    "test": "jasmine-node test/*.spec.js"
  },
  "author": {
    "name": "Joe Beuckman"
  },
  "license": "Don't read software licenses. Don't write software licenses.",
  "readme": "# drupal-client\n\nA Javascript client for Drupal 7 / Services Module\n\n[![Build Status](https://travis-ci.org/jbeuckm/drupal-client.png)](https://travis-ci.org/jbeuckm/drupal-client)\n\n## Requirements\n\n1. An installation of Drupal 7.x and <a href=\"https://drupal.org/project/services\">Services Module</a>\n\n2. REST Server module enabled, an endpoint defined and appropriate permissions (system, user, node, etc.). In server settings, enable only response formatter `json` the request parsing mime types `application/json`, `application/x-www-form-urlencoded` and `multipart/form-data`.\n\n3. A Javascript project - node.js or Titanium are known to work.\n\n## Installation\n\n#### node.js ####\n\n`npm install drupal-client`\n\n#### Titanium/Alloy ####\n\nCopy lib/drupal.js and lib/field.js into your app/lib/ folder.\n\n## Usage\n\nConfigure the client for your installation of Drupal+Services. <i>Note that the URL includes the trailing slash.</i>\n\n```javascript\nvar drupal = require('drupal');\n\ndrupal.setRestPath(\"http://mywebsite.com/\", \"rest_endpoint\");\n```\n\nCreate a Service and enable (at least) the Resources called \"system\" and \"user\".\n\n### Get a session\n\n```javascript\ndrupal.systemConnect(\n\t//success\n\tfunction(sessionData) {\n\t\tvar uid = sessionData.user.uid;\n\t\tconsole.log('session found for user '+uid);\n\t},\n\t//failure\n\tfunction(error) {\n\t\tconsole.log('boo :(');\n\t}\n);\n```\n\n### Create an account\n\n```javascript\nvar user = {\n\tname: 'my_new_username',\n\tpass: 'my_new_password',\n\tmail: 'my_email@drupal.js'\n};\n\ndrupal.createAccount(user,\n\t//success\n\tfunction(userData) {\n\t\tconsole.log('yay!');\n\t},\n\t//failure\n\tfunction(error) {\n\t\tconsole.log('boo :(');\n\t},\n\theaders //optional\n);\n```\n\n### Login\n\n```javascript\nvar my_username = \"<DRUPAL USERNAME>\";\nvar my_password = \"<DRUPAL PASSWORD>\";\n\nvar userObject;\n\ndrupal.login(my_username, my_password,\n\tfunction(userData) {\n\t\tconsole.log('User ' + userData.uid + ' has logged in.');\n\t\tuserObject = userData;\n\t},\n\tfunction(err){\n\t\tconsole.log('login failed.');\n\t}\n);\n```\n\n### Modify User Info\n\nThis updates an account profile on the server. `userObject` is a user object that may have been received from a login request (see above).\n\n```javascript\ndrupal.putResource(\"user/\"+userObject.uid, userObject,\n\tfunction(userData) {\n\t\tconsole.log('user has been updated.');\n\t},\n\tfunction(err){\n\t\tconsole.log('user update failed.');\n\t}\n);\n```\n\n### Upload A File\n\n```javascript\nvar filename = \"uploaded_file.png\";\nvar data = require('fs').readFileSync(\"path/to/file/file.png\");\nvar base64data = data.toString('base64');\nvar filesize = data.length;\n\ndrupal.uploadFile(base64data, filename, filesize,\n  function (response) {\n    fid = response.fid;\n  },\n  function (err) {\n    console.log(err);\n  },\n  function (progress_event) {\n    console.log(progress_event.loaded + '/' + filesize + ' uploaded');\n  }\n);\n```\n\n### Create a New Node\n\n```javascript\nvar node = {\n  type: \"my_content_type\",\n  title: \"My New Node\",\n  body: drupal.field.structureField(\"Check out this great new node!\"),\n  field_bool: drupal.field.structureField(1),\n  field_decimal: drupal.field.structureField(.1),\n  field_float: drupal.field.structureField(2.3),\n  field_integer: drupal.field.structureField(4),\n  field_multiple: drupal.field.structureField([\"one\", \"two\", \"three\"]),\n  field_file: drupal.field.structureField(fid, \"fid\"),\n  field_date: field.structureField(new Date())\n};\n\ndrupal.createNode(node,\n  function (resp) {\n    console.log(resp);\n  },\n  function (err) {\n    console.log(err);\n  }\n);\n```\n\n### Make Requests\n\nThe workhorse function of the interface is `makeAuthenticatedRequest(config, success, failure, headers)`. There are a few helper functions included for posting/getting nodes, getting views, uploading files, etc. They all construct a call to `makeAuthenticatedRequest()`. This function should facilitate most things that people want to do with Drupal in a mobile environment. It's also easy to use `makeAuthenticatedRequest' to make requests against custom Services. The short-term roadmap includes calls to the services supporting entities.\n\n### Tests\n\nTo run the tests, rename `test/config.js.example` to `test/config.js` and replace strings with the url of your Drupal install and your service endpoint.\n\n`npm install`\n`npm test`\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jbeuckm/drupal-client",
  "_id": "drupal-client@0.1.0",
  "_shasum": "eb70bc189a4022cc8c2c16d59a70f3279e91497d",
  "_from": "drupal-client@0.1.0"
}
